* functions
** charact prog
   python es:
   -dinámico: no se comprueban los tipos de datos a medida que se van generando
   -interpretado: se omite el proceso de compilación, ejecución y depuración
** encabezado
*** begin prog
   """
   %@author: ntrivisonno
   
   script for bifurcation diagram or logistic map
   """
*** end prog
   print('#--------------------------------------------')
   print('\n FIN, OK!')

   plt.show()
** assert
   excepciones, se usa para evitar que el prog se interrumpa frente 
   a un error
*** exception ad-hoc
**** ej
     a = 4; b = 0

     try:
         c = a/b
     except ZeroDivisionError:
	 print("No se ha podido realizar la división")

     # ZeroDivisionError: division by zero
     print ("paso assert")
*** clase Exception
    ahora en lugar de enumerar a cada excepcion, se llama a Exception,
    ya que las execpsiones heredan de Exception
**** ej
     a = 4; b = 0

     try:
         c = a/b
	 c = a+"2"
     except Exception as ex:
         print("Ha habido una excepción: ",type(ex))

     # ZeroDivisionError: division by zero
     print ("paso assert")

*** estructura assert,else y finally
    se incorpora la sentencia finally, dicho bloque se ejecuta siempre,
    haya o no ocurrido una excepción. Esto se hace x ejemplo si ocurre
    una excepción y sale del bucle try, pero puede que queden algunas 
    cosas sin hacer, entonces con finally, se puede "resetear todo"
**** ej
     try:
         # Forzamos excepción
         x = 2/0
     except:
         # Se entra ya que ha habido una excepción
         print("Entra en except, ha ocurrido una excepción")
     finally:
     # También entra porque finally es ejecutado siempre
         print("Entra en finally, se ejecuta el bloque finally")

     #Entra en except, ha ocurrido una excepción
     #Entra en finally, se ejecuta el bloque finally
** arrays/vectores
*** row vs column vector
    import numpy as np
    #(5,2)
    row = np.array([[0, 1], [0, 1], [0, 1], [0, 1], [0, 1]])
    
    #(2,5)
    col = np.array([[8, 8, 8, 8, 8],[8, 8, 8, 8, 8]])

*** crear un vector/array
    import numpy as np
    # data matrix 2x4
    data = np.array([[1, 2, 3, 4],[5, 6, 7, 8]])

    print('data')
    print(data)
    print('np.shape(data)')
    print(np.shape(data))
    
    print('data[0,:]')
    print(data[0,:])

    print('data[:,1]')
    print(data[1,:])
*** arange vs linspace
    hay dos formas de crear un vector a partir de un "dt" o "N" steps
***** arange
      import numpy as np
      # arange(x0,xf,dx)
      a = np.arange(0,5,2) # cout=[0 2 4]
***** linspace
      import numpy as np
      # linspace(x0,xf,N)
      a = np.linspace(0,5,2) # cout=[0 5]
*** acceder a filas/columnas vec
    # pruebas para trabajar y acceder a vectores
    import numpy as np

    n = 3
    m = 4
    
    datafil = np.zeros((n,m))
    
    datacol = datafil
    #data = np.array([[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]])
    datafil[1, :] =  [1, 2, 3, 4]
    pp = np.ones((n,n))
    print('shape(pp)')
    print(np.shape(pp))
    print('shape(datafil)')
    print(np.shape(datafil))
    print('datafil')
    print(datafil)
    print('pp')
    print(pp)
    print('datacol')
    print(datacol)

    datacol[:, m-1] =  pp[:,2]

    print('datacol')
    print(datacol)
    print('np.shape(datacol)')
    print(np.shape(datacol))
*** trabajar arreglos como listas
    import numpy as np
    tt = [] # crea lista
    print('type(tt)')
    print(type(tt))
    tta = np.asarray(tt) # transformamos lista a array
    print('type(tta)')
    print(type(tta))
*** warning/error of array with different length
    see warnings section at the end of the file
** append
   metodo de una clase que agrega algo (num,lista, etc) a algo ya existente
*** ej
   agrega lo que le pasamos al vector
   a=[0,1,2] #a.append(3)print a
   print a
   #>> [0, 1, 2]
   a.append(3)
   #>> [0, 1, 2, 3]
   se puede apendizar vectores, etc
   >>> b=[9, 9]
   >>> b
   [9, 9]
   >>> a.append(b)
   >>> a
   [0, 1, 2, 3, 55, [9, 9]]
** comments
   para comentar una funci'on se usa la triple comilla ('''), de esta 
   forma si se hace bien al principio se usa para describir el atributo o el 
   m'etodo. Esto se denomina docstring y se llama al atributo __doc__
*** ej:
    # Functions
    def euler(xk,dt,A,B,uk):
        '''
        euler: integrator function for ODE with euler scheme
        xk: states vector
        dt: incremental time
        A: system matrix,
        B: system matrix,
        uk: control state
        x_next: state solution of the ODE
        '''    
        x_next = xk + dt*(np.dot(A,xk)+np.dot(B,uk))
        return x_next

    print("euler.__doc__")
    print(euler.__doc__) #show docstring of the function,method or attribute
** data
**** objeto
     f = open(filename, mode)
     ‘r’, este es el modo predeterminado, que abre un archivo para leer
     ‘w’, este modo abre un archivo para escritura, si el archivo no existe, crea un nuevo archivo.
     ‘a’, abre un archivo en modo anexar, agrega datos al final del archivo. Si el archivo no existe, crea un nuevo archivo.
     ‘b’, abre un archivo en modo binario.
     ‘r +’, abre un archivo (no crear) para leer y escribir.
     ‘w +’, abre o crea un archivo para escribir y leer, descarta el contenido existente.
     ‘a +’, abre o crea un archivo para leer y escribir, y agrega datos al final del archivo.
*** leer data
**** numpy
    # example by lucas
    # nos creamos un vector de casos para acceder a disintos simulaciones
    CASO = 0
    data = np.loadtxt('Resu_RBD/' + ['Forces_proc_C_C01.txt', 'Forces_proc_C_C02.txt', 'Forces_proc_C_C03.txt'][CASO], delimiter=',', skiprows=1)
    # Encabezado del txt:
    # Time, alpha, beta, delta2, V_inf (= V_t), u(v_body_X), v(v_body_Y), w(v_body_Z), p, q, r, gx, gy, gz, FX_body, FY_body, FZ_body
    M = data[:,0]
    alpha = data[:, 1]
    beta = data[:, 2]
    delta2 = data[:, 3]  # alpha2
    vt = data[:, 4]
    u = data[:, 5]  # vel_body_X
**** objeto
***** example
      f = open('./test.txt', 'r')
      content = f.read()
      f.close()
      print(content)
*** escribir data
**** numpy
      np.savetxt('nombre_archivo', objeto_guardar, formato_salida, encabezado)
      formato_salida: %.2f -> flotantes con dos decimales
***** example
      import numpy as np
      arr = np.array([[1.20, 2.20, 3.00], [4.14, 5.65, 6.42]])
      np.savetxt('my_arr.txt', arr, fmt='%.2f', header = 'Col1 Col2 Col3')
**** archivo    
***** example
      #Escribimos un poco
      f = open('test.txt', 'w')
      for i in range(5):
         f.write(f"Linea numero {i}\n")
    
      f.close()

**** agragar linea al txt
     f = open('test.txt', 'a')
     f.write(f"Agrego una linea mas\n")
     f.close()
** dhf5
*** read 
    import h5py

    h5f = h5py.File('Data_vacio.hdf5','r')
    x = h5f['/Inertial_coord'][:] # me importa un vector x de size-> print(np.shape(x)) (1001,3)
    t = h5f['/Time'][:]
    h5f.close()
** enumerate
*** ex1 - base 1
   # use python3
   names = ['Bob', 'Alice', 'Guido']
   for index, value in enumerate(names, 1):
        print(f'{index}: {value}')
*** ex1 - base 0
   # use python3
   names = ['Bob', 'Alice', 'Guido']
   for index, value in enumerate(names):
        print(f'{index}: {value}')
** is vs ==
   is compara si son iguales a donde apunta un puntero, == evalua si el valor del puntero es el mismo

   "is" expressions evaluate to True if two 
   variables point to the same object

   "==" evaluates to True if the objects 
   referred to by the variables are equal
*** ej
   a = [1 2 3]
   a = b
   a is b
   ## True
   a == b
   ## True
   c = list(a)
   a == c
   ## True
   a is c
   ## false
   
** =
   ojo con el igual, que hace que apunte al mismo lugar de direcci'on??? check!
** lambda function
   es una funcion para crear una funcion inline o para hacer una funcion de forma recursiva
*** ej:
    # testing lambda function
    suma = lambda a,b: a+b
    
    resu = suma(2,4)

    print("el resultado es suma(2,4)= {}".format(resu))
    print("el resultado es suma(2,4)= {}".format(lambda a,b: a+b(2,4)))
    print(((lambda a,b: a+b))(2,4))
    tmb la funcion puede devolver mas de un valor
*** ej
    # testing lambda function
    suma = lambda a,b: (a,b)

    print(suma(2,4))
** list
   es una estructura definida [], que tiene una gran cantidad de métodos asociados
   # lista != tupla
   a = [(1,2,1+j,'5')]
   for i in a:
       print(i)
*** métodos listas
**** append(x)
     le incorpora un elemento a lo último
     a = [(1,2,1+j,'5')]
     a.append(5)
     print(a)
**** extend
     sería un append pero se le incorpora un iterador (vector, lista, etc)
     a = [(1,2,1+j,'5')]
     a.extend(range(5))
     print(a)
**** insert(i,x)
     # se inserta un valor en la posicion i
     a = [1,2,1+2,'5']
     a.insert(1,1.5) # insertamos un valor intermedio
     print(a)
**** remove(x)
     #Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item
     a = [1,2,1+2,'5']
     b = list(a)
     b.remove(2)
     print(a)
** file
   file handling
   pythong has several methods (functions) for handling files
*** create
    to create a file, should use the 'open' method with:
    - 'x' -> create, runs ERRORS if doesn't exist
    - 'w' -> write, open a files for writing, creates the files is 
    doesn't exist
    - 'a' -> append, apendding, creates a file if doesn't exist   
*** open
    open(name_file, method)
    there are several methods for opening files: x, w, r, a, t, b
    - 'r' -> read, DEFAULT VALUE, opens a file for reading, ERROR if 
    doesn't exits
    - 'x' -> create, runs ERRORS if doesn't exist
    - 'w' -> write, open a files for writing, creates the files is 
    doesn't exist
    - 'a' -> append, apendding, creates a file if doesn't exist
    additionally, can specify the type:
    - 't' -> text, DEFAULT
    - 'b' -> binary (eg, pictures)
*** write
    use the open() method
**** new file
    open()
    - 'x' -> create, runs ERRORS if doesn't exist
    - 'w' -> write, open a files for writing, creates the files is 
    doesn't exist
    - 'a' -> append, apendding, creates a file if doesn't exist
**** existing file
     open()
    - 'w' -> write, open a files for writing, creates the files is 
    doesn't exist
    - 'a' -> append, apendding, creates a file if doesn't exist   
*** reading
    use open() method, with 'r', DEFAULT value, ERROR if doesn't
    exist
**** example
    f = open('myfile.txt', 'r')
    data = f.read()
    print(data)
    f.close()
*** example
**** open, write
    f = open('myfile.txt','x') # x -> create
    data = 'Hello world'
    f.write(data)
    f.close()
**** writing vector
     data = [1.6, 3.4, 6.2]
     f = open('mytext.txt', 'x')
     for _i in data:
          record = str(value)
	  f.write(record)
	  f.write('\n') #new line
     f.close()
**** replace
     f = open('mytext.txt', 'r')
     for _i in f:
          record = record.replace('\n', ' ')
	  print(record)
     f.close()
** for
*** directo
   el bucle for establece una variable iteradora en cada valor de la lista.
   # lista != tupla
   a = [(1,2,1+j,'5')]
   for i in a:
       print(i)
      
   si por ejemplo los valores de lista son valores secuenciales se puede usar la funcion range()
*** for i in range()
    bucle for para cuando los valores de lista arecorrer son valores secuenciales
    la funcion range() tiene los sig argumentos de entrada: range(inicio,fin,paso)
    por defecto range(), comienza en 0 y tiene incremento 1
**** ej
     for i in range(-1,5,2):
        print(i,end=", ")
** functions
   las funciones en python se usan para varias cosas:
   - como argumento de otras funciones
   - retornan valores de otras funciones
   - se le asignan variables y las almacena en dato de estructura
*** ej
    def myfun(a+b):
    return a+b

    >>> funcs = [myfun]
    >>> funcs[0]
    <function myfunc at 0x107012230>
    >>> funcs[0](2,3)
    5
** odeint - scipy
   integrador de ODEs
   https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html
*** ej
    import scipy.integrate as integrate
    import matplotlib.pyplot as plt
    import numpy as np
    
    #ODE: u'' = a*u + b*u' + c --> if a < 0, oscilation
    a = -1; b = -0.5; c = 0.1;

    def deriv_z(z, phi):
    u, udot = z
    return [udot, (a*u + b*udot + c)]
    
    phi = np.linspace(0, 20, 2000)
    zinit = [2, 0]
    z = integrate.odeint(deriv_z, zinit, phi)
    u, udot = z.T
    plt.plot(phi, u, label='u')
    plt.plot(phi, udot, label="u'")
    plt.legend(loc=1)
    plt.grid(True)
    plt.show()
** plot
si hay varios plots y queremos que se muestren todos a lo 'ultimo, 
podemos hacer un plt.show() a lo 'ultimo, o en cada plt.show() poner:
plt.plot(block=False)
*** plotea dos plot en una sola graf
**** ej
     import numpy as np
     import matplotlib.pyplot as plt

     M_eg = [0.1,  0.6,  0.8,  0.9,  0.95, 1.,   1.05, 1.1,  1.2,  1.35, 1.5,  1.75, 2.  ]
     Ca_eg= [0.144, 0.144, 0.146, 0.167, 0.221, 0.327, 0.383, 0.381, 0.37,  0.353, 0.338, 0.314,
     0.294]
     M_ba = [0.01,  0.4,   0.6,   0.7,   0.8,   0.9,   0.95,  0.975, 1.,    1.025, 1.05,  1.1,
     1.2,   1.5,   2.,    2.5,   3.   ]
     Ca_ba = [0.144, 0.144, 0.144, 0.144, 0.146, 0.16,  0.202, 0.24,  0.284, 0.313, 0.332, 0.337,
     0.34,  0.321, 0.276, 0.24,  0.214]

     plt.plot(M_eg,Ca_eg,'o-r',label='Egip')
     plt.plot(M_ba,Ca_ba,'*-b',label='Baran')
     plt.xlabel('Mach')
     plt.ylabel('Ca')
     plt.title('Ca')
     plt.legend()
     plt.show()
*** subplot
**** automatizado
     # script para plotear vectores automatizado
     import numpy as np
     import matplotlib.pyplot as plt
     # carga de datos
     M_eg = []
     M_eg = np.asarray([0.1,  0.6,  0.8,  0.9,  0.95, 1.,   1.05, 1.1,  1.2,  1.35, 1.5,  1.75, 2.  ])
     Ca_eg = np.asarray([0.144, 0.144, 0.146, 0.167, 0.221, 0.327, 0.383, 0.381, 0.37,  0.353, 0.338, 0.314, 0.294])
     
     M_eg2 = M_eg*2.
     Ca_eg2 = Ca_eg*2.
     
     M_eg3 = M_eg*3
     Ca_eg3 = Ca_eg*3
     
     #M_ba = np.asarray([0.01,  0.4,   0.6,   0.7,   0.8,   0.9,   0.95,  0.975, 1.,    1.025, 1.05,  1.1, 1.2,   1.5,   2.,    2.5,   3.   ])
     #Ca_ba = np.asarray([0.144, 0.144, 0.144, 0.144, 0.146, 0.16,  0.202, 0.24,  0.284, 0.313, 0.332, 0.337, 0.34,  0.321, 0.276, 0.24,  0.214])
     # aca empieza la automatizacion     
     M = []
     M = np.asarray([M_eg, M_eg, M_eg])
     M = M.T
     C = []
     C = np.asarray([Ca_eg, Ca_eg2, Ca_eg3])
     C = C.T
     leg = ['Mach', 'Mach 2', 'Mach 3']
     
     [i,j] = np.shape(M)
     
     fig_size = (12,4)
     f, ax = plt.subplots(1,3, figsize=fig_size)
     f.canvas.set_window_title('Coordenadas en marco inercial')
     f.suptitle('Coordenadas en marco inercial')
     for k in range(j):
         ax[k].plot(M[:,k], C[:,k], label=leg[k])
         ax[k].set_title(leg[k])
         ax[k].legend()
         ax[k].grid()
         ax[k].set_xlabel('time [s]')
         ax[k].set_ylabel('Mz [Nm]')
     
plt.show()
   
**** a pata
     import numpy as np
     import matplotlib.pyplot as plt
     
     M_eg = [0.1,  0.6,  0.8,  0.9,  0.95, 1.,   1.05, 1.1,  1.2,  1.35, 1.5,  1.75, 2.  ]
     Ca_eg= [0.144, 0.144, 0.146, 0.167, 0.221, 0.327, 0.383, 0.381, 0.37,  0.353, 0.338, 0.314,
     0.294]
     M_ba = [0.01,  0.4,   0.6,   0.7,   0.8,   0.9,   0.95,  0.975, 1.,    1.025, 1.05,  1.1,
     1.2,   1.5,   2.,    2.5,   3.   ]
     Ca_ba = [0.144, 0.144, 0.144, 0.144, 0.146, 0.16,  0.202, 0.24,  0.284, 0.313, 0.332, 0.337,
     0.34,  0.321, 0.276, 0.24,  0.214]
     
     
     f, ax = plt.subplots(2)
     ax[0].plot(M_eg, Ca_eg,'o-b', label='Ca Egip')
     ax[0].set_xlim([min(M_ba), max(M_ba)])
     ax[0].set_title('Ca vs Mach')
     ax[1].plot(M_ba, Ca_ba,'*-r', label='Cd Baran')
     ax[1].set_xlim([min(M_ba), max(M_ba)])
     ax[1].set_title('Ca vs Mach')
     
     plt.show()
**** cortito y al pie
     plt.subplot(121)
***** ej
     import numpy as np
     import matplotlib.pyplot as plt
     
     M_eg = [0.1,  0.6,  0.8,  0.9,  0.95, 1.,   1.05, 1.1,  1.2,  1.35, 1.5,  1.75, 2.  ]
     Ca_eg= [0.144, 0.144, 0.146, 0.167, 0.221, 0.327, 0.383, 0.381, 0.37,  0.353, 0.338, 0.314,
     0.294]
     M_ba = [0.01,  0.4,   0.6,   0.7,   0.8,   0.9,   0.95,  0.975, 1.,    1.025, 1.05,  1.1,
     1.2,   1.5,   2.,    2.5,   3.   ]
     Ca_ba = [0.144, 0.144, 0.144, 0.144, 0.146, 0.16,  0.202, 0.24,  0.284, 0.313, 0.332, 0.337,
     0.34,  0.321, 0.276, 0.24,  0.214]


     #--------------------------------------------
     # Plots
     plt.subplot(121)
     plt.plot(M_eg, Ca_eg,'o-b', label='Ca Egip')
     plt.grid()
     plt.legend()

     plt.subplot(122)
     plt.plot(M_ba, Ca_ba,'*-r', label='Cd Baran')
     plt.grid()
     plt.legend()

     plt.show()
*** plot con legends avanzado
    https://matplotlib.org/stable/gallery/text_labels_and_annotations/tex_demo.html#sphx-glr-gallery-text-labels-and-annotations-tex-demo-py
**** Ej, indentar a la hora de usar en .py
     # ploteo avanzado con latex, usar python3
     import numpy as np
     import matplotlib
     matplotlib.rcParams['text.usetex'] = True
     import matplotlib.pyplot as plt
     
     # interface tracking profiles
     N = 500
     delta = 0.6

     fig, ax = plt.subplots(figsize=(6, 4), tight_layout=True)
     
     X = np.linspace(-1, 1, N)
     ax.plot(X, (1 - np.tanh(4 * X / delta)) / 2,    # phase field tanh profiles
     X, (1.4 + np.tanh(4 * X / delta)) / 4, "C2",  # composition profile
     X, X < 0, "k--")                        # sharp interface

     # legend
     ax.legend(("phase field", "level set", "sharp interface"),
     shadow=True, loc=(0.01, 0.48), handlelength=1.5, fontsize=16)
     
     # the arrow
     ax.annotate("", xy=(-delta / 2., 0.1), xytext=(delta / 2., 0.1),
     arrowprops=dict(arrowstyle="<->", connectionstyle="arc3"))
     ax.text(0, 0.1, r"$\delta$",
     color="black", fontsize=24,
     horizontalalignment="center", verticalalignment="center",
     bbox=dict(boxstyle="round", fc="white", ec="black", pad=0.2))
     
     # Use tex in labels
     ax.set_xticks([-1, 0, 1])
     ax.set_xticklabels(["$-1$", r"$\pm 0$", "$+1$"], color="k", size=20)
     
     # Left Y-axis labels, combine math mode and text mode
     ax.set_ylabel(r"\bf{phase field} $\phi$", color="C0", fontsize=20)
     ax.set_yticks([0, 0.5, 1])
     ax.set_yticklabels([r"\bf{0}", r"\bf{.5}", r"\bf{1}"], color="k", size=20)
     
     # Right Y-axis labels
     ax.text(1.02, 0.5, r"\bf{level set} $\phi$",
     color="C2", fontsize=20, rotation=90,
     horizontalalignment="left", verticalalignment="center",
     clip_on=False, transform=ax.transAxes)

     # Use multiline environment inside a `text`.
     # level set equations
     eq1 = (r"\begin{eqnarray*}"
     r"|\nabla\phi| &=& 1,\\"
     r"\frac{\partial \phi}{\partial t} + U|\nabla \phi| &=& 0 "
     r"\end{eqnarray*}")
     ax.text(1, 0.9, eq1, color="C2", fontsize=18,
     horizontalalignment="right", verticalalignment="top")
     
     # phase field equations
     eq2 = (r"\begin{eqnarray*}"
     r"\mathcal{F} &=& \int f\left( \phi, c \right) dV, \\ "
     r"\frac{ \partial \phi } { \partial t } &=& -M_{ \phi } "
     r"\frac{ \delta \mathcal{F} } { \delta \phi }"
     r"\end{eqnarray*}")
     ax.text(0.18, 0.18, eq2, color="C0", fontsize=16)

     ax.text(-1, .30, r"gamma: $\gamma$", color="r", fontsize=20)
     ax.text(-1, .18, r"Omega: $\Omega$", color="b", fontsize=20)
     
     plt.show()

** presione enter
   comando para que para continuar se debe presionar la tecla enter

   input("Presione enter") # esto es para que pause y cont con (enter)
** print
*** similar fprintf
    import numpy as np
    data = np.array([1, 2, 3, 4])
    coef_readed = False
    print('\nBefore calling bar: {} {}'.format(data,coef_readed))
    print("\nBefore calling bar: {} {}".format(data,coef_readed)) 
    # print("\nBefore calling bar: {data} {coef_readed}")
    print('\n*- - - - - - - - - - - - - - *')
    print('Fin! Prog OK\n')
*** avanzado
    #ver estimacion.py en ~/Documents/CIMEC/Tesis/estimacion/
    print(("%3f: %s" % (k, sol["status"]))) # float
    print(("%3d: %s" % (k, sol["status"]))) # entero
** underscore "_"
https://dbader.org/blog/meaning-of-underscores-in-python#:~:text=The%20underscore%20prefix%20is%20meant,public%E2%80%9D%20variables%20like%20Java%20does.
*** Single Trailing Underscore: var_  -> evitar conflicto nombres
    Se usa para evitar el conflicto de nombres, generalmente como ciertos
    nombres ya est'an tomados, por clases, etc, se coloca el underscore
    atras
**** ej
     >>> def make_object(name, class):
     SyntaxError: "invalid syntax"
     
     >>> def make_object(name, class_):
     ...     pass
*** Single Leading Underscore: _var -> variable interna
    solo x convencci'on (en lo que respecta a variables y m'etodos).
    es una sugerencia de la comunidad programadora, 
    y solo significa que es una variable interna, nada m'as
    No hace diferencia entre clase publica y privada. En realidad se usa
    el "_" antes para decir: "hey, esto no realmente significa que es
    parte de la interfaz p'ublica de la clase. Mejor dejemoslo solo"
**** ej:
     class Test:
     def __init__(self):
     self.foo = 11
     self._bar = 23
    # result python
     >>> t = Test()
     >>> t.foo
     11
     >>> t._bar
     23
*** Double Leading Underscore: __var -> manglear
    esto indica al interprete de python que re-escriba el nombre del 
    atributo para evitar conflictos de nombres en las subclases, cuando
    la clase se expanda.
    Esto se denomina name mangling (destrozar, pasar x exprimidor)
*** Double Leading and Trailing Underscore: __var__ -> cosas esp
    al tener leading and trailing dundle, no se los manglea sino que 
    se los deje para cosas especiales, por ejem:
    __init__ para constructores
    __call__ p hacer un objeto llamable
**** ej:
     class PrefixPostfixTest:
     def __init__(self):
     self.__bam__ = 42
     # en pantalla
     >>> PrefixPostfixTest().__bam__
     42
*** Sinegle Underscore: _
    se usa para decir que la variable es temporal o insignificante
**** ej
     cont en for temporal 
*** dunder
    dunder, es una expresion para abreviar "double underscore", ej:
    dunder bazz: __baz
    dunder baz dunder:  __baz__ (creo q el 'ultimo dunder se omite)
** size/shape 
   x = [1,2,3]
   print(np.shape(x))
** swapping values
   a = 23
   b = 45
   # en otros prog se usaba una variable aux
   aux = a
   a = b
   b = a
   # en python use this short-hand
   a,b = b,a
** tupla
   # tupla != lista
   # tupla, arreglos de datos no homogeneos
   a = (1,2,1+j,'5')
   
*** verificar si esta dentro
    1+j in a
   
*** zip, mershear dos tuplas
    la funcion zip, retorna un objeto zip, que es un iterador de tuplas
    donde los primeros valores de cada tupla se pasan juntos, y asi
    sucesivamente
**** ej
     a1 = ("John", "Charles", "Mike", "Nico")
     a = ("John", "Charles", "Mike")
     b = ("1", "Christy", "Monica","pp")

     x = zip(a, b)
     x1 = zip(a1, b)
     #use the tuple() function to display a readable version of the result:

     print(tuple(x))
     print(tuple(x1))
** varios
*** agregar
** warnings
*** error np.arrays length
    when facing with arrays with different length, there would be an error. To Face
    it you can avoid the warning and use list in stead of arrays, or handle the array
    as an object
**** avoid warning
     import warnings
     warnings.filterwarnings("ignore", category=np.VisibleDeprecationWarning) 
**** handle the array as object
     You can add dtype = object when you create your numpy array as:

     numpy.array([[1,2,3],[4,5,6]], dtype = object)
     or if you change a list or a tuple called 'a' to a numpy array code as:

     numpy.asarray(a, dtype = object)   
* otro
** matlab2python cheatsheet
   http://mathesaurus.sourceforge.net/matlab-numpy.html
